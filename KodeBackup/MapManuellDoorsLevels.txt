<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Top-Down Game</title>
  <style>
    body {
      margin: 0;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background: #e0e0e0;
    }

    #gameCanvas {
      background: #a8d0a8;
      border: 4px solid #444;
      image-rendering: pixelated;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas"></canvas>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const tileSize = 32;

    // === Tiles ===
    const tileImages = {
      grass: new Image(),
      coblestone: new Image(),
      tree: new Image(),
      brick: new Image(),
      plank: new Image(),
      door: new Image()
    };

    tileImages.grass.src = 'images/grassTile.png';
    tileImages.tree.src = 'images/treeTile.png';
    tileImages.brick.src = 'images/brickTile.png';
    tileImages.plank.src = 'images/plankTile.png';
    tileImages.door.src = 'images/doorTile.png';
    tileImages.coblestone.src = 'images/coblestoneTile.png';

    const tileMapping = {
      'G': 'grass',
      'C': 'coblestone',
      'T': 'tree',
      'B': 'brick',
      'P': 'plank',
      'D': 'door'
    };

    const nonWalkableTiles = ['tree', 'brick'];

    // === Karakter ===
    const characterImages = {
      up: new Image(),
      down: new Image(),
      left: new Image(),
      right: new Image(),
    };

    characterImages.up.src = 'images/pixelmannUp.png';
    characterImages.down.src = 'images/pixelmannDown.png';
    characterImages.left.src = 'images/pixelmannLeft.png';
    characterImages.right.src = 'images/pixelmannRight.png';

    const character = {
      x: 0,
      y: 0,
      direction: 'down'
    };

    const keys = {
      w: false,
      a: false,
      s: false,
      d: false
    };

    const doorMap = {
        0: { '2,9': { targetLevel: 1, targetX: 1, targetY: 1 } },
        1: { '10,4': { targetLevel: 0, targetX: 3, targetY: 10 } }
    };

    // === NivÃ¥er ===
    const levels = [
        //LEVEL START
      {
        layout: [
          'GGGGGGGGGGGG',
          'GGGGGGGGGGGG',
          'GGTTGGGGGGGG',
          'GGGGGGGGGGGG',
          'GGGGTGGTGGGG',
          'GGGGGGGGGGGG',
          'GGBBGGGGGGGG',
          'GBBBBGGGGGGG',
          'GBBBBGGGGGGG',
          'GBDBBGGGGGGG',
          'GGGGGGGGGGGG',
          'GGGGGGGGGGGG'
        ],
        startX: 4,
        startY: 10,
        background: 'grass'
      },
        //LEVEL: HUS1
      {
        layout: [
          'BBBBBBBBBBBB',
          'BPPPPPPPPPPB',
          'BPPPPPPPPPPB',
          'BPPPPPPPPPPB',
          'BPPPPPPPPPDB',
          'BPPPPPPPPPPB',
          'BBBBBBBBBBBB'
        ],
        startX: 3,
        startY: 3,
        background: 'plank'
      }
    ];

    let currentLevel = 0;
    let map = [];
    let mapWidth = 0;
    let mapHeight = 0;

    function loadLevel(levelIndex, startX = null, startY = null) {
        const level = levels[levelIndex];
        currentLevel = levelIndex;

        map = level.layout.map(row => row.split('').map(char => tileMapping[char]));
        mapHeight = map.length;
        mapWidth = map[0].length;

        canvas.width = mapWidth * tileSize;
        canvas.height = mapHeight * tileSize;

        currentBackground = level.background || 'grass';

        character.x = startX !== null ? startX : level.startX;
        character.y = startY !== null ? startY : level.startY;

        gameLoop();
    }

    function drawMap() {
      for (let y = 0; y < mapHeight; y++) {
        for (let x = 0; x < mapWidth; x++) {
          const tileType = map[y][x];
          ctx.drawImage(tileImages[currentBackground], x * tileSize, y * tileSize, tileSize, tileSize);

          if (tileType !== currentBackground) {
            const img = tileImages[tileType];
            if (img.complete) {
              ctx.drawImage(img, x * tileSize, y * tileSize, tileSize, tileSize);
            }
          }
        }
      }
    }

    function drawCharacter() {
      const img = characterImages[character.direction];
      ctx.drawImage(img, character.x * tileSize, character.y * tileSize, tileSize, tileSize);
    }

    function canMoveTo(x, y) {
      if (x < 0 || y < 0 || x >= mapWidth || y >= mapHeight) return false;
      const tile = map[y][x];
      return !nonWalkableTiles.includes(tile);
    }

    function update() {
      if (keys.w && canMoveTo(character.x, character.y - 1)) {
        character.y--;
        character.direction = 'up';
      }
      if (keys.s && canMoveTo(character.x, character.y + 1)) {
        character.y++;
        character.direction = 'down';
      }
      if (keys.a && canMoveTo(character.x - 1, character.y)) {
        character.x--;
        character.direction = 'left';
      }
      if (keys.d && canMoveTo(character.x + 1, character.y)) {
        character.x++;
        character.direction = 'right';
      }

      const currentTile = map[character.y][character.x];
      if (currentTile === 'door') {
        const key = `${character.x},${character.y}`;
        const door = doorMap[currentLevel]?.[key];

            if (door) {
                loadLevel(door.targetLevel, door.targetX, door.targetY);
            }
        }
    }

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawMap();
      drawCharacter();
    }

    document.addEventListener('keydown', (e) => {
      if (e.key in keys) {
        keys[e.key] = true;
        update();
        gameLoop();
      }
    });

    document.addEventListener('keyup', (e) => {
      if (e.key in keys) {
        keys[e.key] = false;
      }
    });

    // Start spillet
    loadLevel(0);
  </script>
</body>
</html>
