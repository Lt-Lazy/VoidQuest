const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const tileSize = 40;

let menuOpen = false;


// === Kart: Lokasjoner og visning ===
const mapData = [
  { name: "Spenningsbyen", x: 20, y: 20, type: "city", color: "dodgerblue" },
  { name: "Sti-1", x: 35, y: 20, type: "road", color: "#8B4513" },
  { name: "Sti-1", x: 50, y: 20, type: "road", color: "#8B4513" },
  { name: "Sti-1", x: 65, y: 20, type: "road", color: "#8B4513" },
  { name: "Sti-1", x: 80, y: 20, type: "road", color: "#8B4513" },
  
];

// === Tiles ===
const tileImages = {
  grass: new Image(),
  coblestone: new Image(),
  tree: new Image(),
  brick: new Image(),
  roof: new Image(),
  plank: new Image(),
  fence: new Image(),
  table: new Image(),
  door: new Image(),
  water: new Image(),
  sand: new Image(),
  stoneSingle: new Image(),
  campfire: new Image(),
  voidgate: new Image()
};

tileImages.grass.src = 'images/grassTile.png';
tileImages.tree.src = 'images/treeTile.png';
tileImages.brick.src = 'images/brickTile.png';
tileImages.roof.src = 'images/roofTile.png';
tileImages.plank.src = 'images/plankTile.png';
tileImages.door.src = 'images/doorTile.png';
tileImages.fence.src = 'images/fenceTile.png';
tileImages.table.src = 'images/tableTile.png';
tileImages.coblestone.src = 'images/coblestoneTile.png';
tileImages.water.src = 'images/waterTile.png';
tileImages.sand.src = 'images/sandTile.png';
tileImages.stoneSingle.src = 'images/stoneSingleTile.png';
tileImages.campfire.src = 'images/campfireStill.png';
tileImages.voidgate.src = 'images/voidgateTile.png';

const nonWalkableTiles = ['tree', 'brick', 'fence', 'table', 'water', 'stoneSingle','campfire'];

const tileMapping = {
  'G': 'grass',
  'C': 'coblestone',
  'T': 'tree',
  'B': 'brick',
  'R': 'roof',
  'P': 'plank',
  'F': 'fence',
  'F': 'fence',
  '1': 'table', 
  'D': 'door',
  'W': 'water',
  'S': 'sand',
  's': 'stoneSingle',
  'c': 'campfire',
  'V': 'voidgate',
};

const characterImages = {
  up: new Image(),
  down: new Image(),
  left: new Image(),
  right: new Image(),
};

characterImages.up.src = 'images/pixelmannUp.png';
characterImages.down.src = 'images/pixelmanndown.png';
characterImages.left.src = 'images/pixelmannLeft.png';
characterImages.right.src = 'images/pixelmannRight.png';

const fishPools = {
  0: [ // Utenfor
    { name: "Grodr", rarity: "common", image: "images/grodr.png", chance: 800, price: 5 },
    { name: "Grauder", rarity: "common", image: "images/grauder.png", chance: 500, price: 14 },
    { name: "Albino Grodr", rarity: "rare", image: "images/albinoGrodr.png", chance: 49, price: 74 },

    // { name: "Mørkål", rarity: "rare", image: "images/morkaal.png", chance: 2, price: 55 }
  ],
  2: [ // Cave
    { name: "Grodr", rarity: "common", image: "images/grodr.png", chance: 800, price: 5 },
    { name: "Grauder", rarity: "common", image: "images/grauder.png", chance: 500, price: 10 },
    { name: "Deep Void Lure", rarity: "legendary", image: "images/deepVoidLure.png", chance: 10, price: 218 },
    { name: "Skuggosk", rarity: "rare", image: "images/skuggosk.png", chance: 80, price: 39 }
  ]
};

const treeCreaturePools = {
  0: [ // Level 0 – Spenningsbyen
    { name: "Grey Mouse", rarity: "common", image: "images/mouseGrey.png", chance: 900, price: 16},
    { name: "Poisetle", rarity: "rare", image: "images/poisetle.png", chance: 80, price: 46 },
    { name: "Albino Mouse", rarity: "rare", image: "images/albinoMouse.png", chance: 50, price: 67},

  ],

  2: [ // Cave, kan være tomt
    // legg til hvis ønskelig
  ]
};

const raritySettings = {
  common: { time: 6000, color: "gray", border: "gray" },
  uncommon: { time: 5000, color: "green", border: "green" },
  rare: { time: 2000, color: "blue", border: "blue" },
  legendary: { time: 1200, color: "gold", border: "gold" },
  Mythical: { time: 1000, color: "purple", border: "purpe" }
};

const npcs = [
  {
    name: "Morgan the sailor",
    image: "images/morganSailorDown.png",
    x: 2,
    y: 2,
    level: 1,
    type: "shop",
    dialog: ["I give a good coin in exchange of good fish!"]
  },
  {
    name: "Path Seeker Nodin",
    image: "images/pixelmanndown.png",
    x: 10,
    y: 6,
    level: 1,
    type: "lore",
    dialog: ["hail be thou! My name is Nodin!", 
      "Welcome to Spenningsbyen!",
      "This is a town located far to the north-west in the continent of Voidlore.",
      "I am a fellow Path Seeker myself, and for now i have dedicated myself to help fellow Path Seekers!",
      "I will give you a quick rundown and then off with you.",
      "You can interact with others by pressing E, like you just found out...",
      "Be sure to use your map by pressing M, to navigate through Voidlore.",
      "The fellow over there is Morgan, i dont know much about the man. But i got some gold by giving him some grodr fish!",
      "To fish you just have to go up to any lake or ocean and interact.",
      "I myself only hunt rare land creatures.",
      "Be sure to keep track of your inventory by pressing i. I like to have it open almost always, the inventory shows important info.",
      "And ofcourse press TAB to se the menu.",
      "Dont forget to save often!",
      "Last tip, you can zoom in and out after your liking for better experience.",
      "I hope our path crosses, fellow Path Seeker...",
    ]
  },
  {
    name: "Nocturne",
    image: "images/nocturneDown.png",
    x: 19,
    y: 3,
    level: 0,
    type: "lore",
    dialog: ["Greeting to ya!", 
      "I have retired from searching the land after creatures. Those years are behind me.",
      "An average old man are maybe not that much to use, but i have more knowledge of these Great cave water creatures, than anyone in Voidlore!",
      "I originate from a town to the east called Yurborg, not to far away.",
      "But this cave was my old pearl.",
      "After the old moss clan invaded Yurborg city i had to leave.",
      "I took refugee here at Morgan's gatherers hub.",
      "He is a good man.",
      "You look like a happy and hopeful person yourself! Let me give you a piece of advice my friend.",
      "If you havent yet seen it. There is a trophy hanging over the door in to the cave, that is the legendary Deep Void Lure! I caught it myself.",
      "My tip was to fish in my old pear here, you will get many trophies to show off.",
      "Now.. take care mye friend."

    ]
  },
  {
    name: "Deep Void Lure",
    image: "images/deepVoidLure.png",
    x: 22,
    y: 2,
    level: 0,
    type: "creature",
    dialog: []
  },
  // Legg til flere her!
];

let trophies = []; // Navn på fiskene du har fanget før

const character = {
  x: 0, y: 0,
  pixelX: 0, pixelY: 0,
  direction: 'down',
  moving: false
};

const keys = { w: false, a: false, s: false, d: false };

const doorMap = {
  0: { //SPENNINGSBYEN
    '2,9': { targetLevel: 1, targetX: 10, targetY: 2 }, // TIL HUS
    '22,3': { targetLevel: 2, targetX: 5, targetY: 1 },  // TIL CAVE
    '23,5': { targetLevel: 4, targetX: 1, targetY: 3 }  // TIL STI-1
  },
  1: { //HUS HUB SPENNINGSBYEN
    '10,1': { targetLevel: 0, targetX: 2, targetY: 10 }, // TIL UTE 
    '7,1': { targetLevel: 3, targetX: 7, targetY: 6 } // TIL TROFEROM
  },
  2: { //CAVE1 SPENNINGSBYEN
    '5,0': { targetLevel: 0, targetX: 22, targetY: 4 }  // TIL UTE 
  },
  3: { //TROFEROM HUS HUB SPENNINGSBYEN
    '7,7': { targetLevel: 1, targetX: 7, targetY: 2 }  // TIL HUS HUB
  },
  4: { //STI-1
    '0,3': { targetLevel: 0, targetX: 22, targetY: 5 },  // TIL SPENNINGSBYEN
    '23,3': { targetLevel: 5, targetX: 1, targetY: 5 }  // TIL YURBORG
  },
  5: { //YURBORG
    '0,5': { targetLevel: 4, targetX: 22, targetY: 3 },  // TIL STI-1
    '5,5': { targetLevel: 0, targetX: 22, targetY: 5 }  // TIL CASINO-1
  },
  6: { //CASINO-1
    '5,5': { targetLevel: 5, targetX: 5, targetY: 2 }  // TIL YURBORG
  }
};

const levels = [
  {
    //Spenningsbyen "0"
    layout: [
      'TTTTTTTTTTTTTTTTTTsCCRRR',
      'TGGGGGGGGGGGGGGGGGGsCBBB',
      'TGGGGGGGGGGGGGGGGGGsCPPP',
      'TGGGGGGGGGGcGGGGGGGGsPDP',
      'TGGGGGGGGGGGGGGGGGGGGsGs',
      'TGGGGGGGGGGGGGGGGGGGGGGV',
      'TRRRRGGGGGGGGGGGGGGGGGGT',
      'TRRRRGTTGGGGGGGGGGGGGGGT',
      'TBBBBTTTTTTGGGGGGGGGSSSS',
      'TBDBBFFFFFGGGGGGGGGSWWWW',
      'TGGGGGGGGGGGGGGGGGSWWWWW',
      'TTTTTTTTTTTTTTTTTSWWWWWW'
    ],
    startX: 4,
    startY: 10,
    background: 'grass'
  },
  {
    //GATHERERS HUB "1"
    layout: [
      'BBBBBBBBBBBB',
      'BBBBBBBDBBDB',
      'BPPPPPPPPPPB',
      'B111PPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB'
    ],
    startX: 5,
    startY: 5,
    background: 'plank'
  },
  {
    // DEEP VOID CAVE SPENNINGSBYEN "2"
    layout: [
      'CCsssVssCsWW',
      'CsCssCCsCCsW',
      'CsCCCCCCCCCC',
      'CCCsCCCCCCsC',
      'CsCsssCCCCsC',
      'CCCCsCCssCsC',
      'CCCCsCCCCCsC',
      'CCCCsCCCCCCC'
    ],
    startX: 5,
    startY: 5,
    background: 'coblestone'
  },
  {
    // HUS HUB TROFE ROM "3"
    layout: [
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BPPPPPPPPPPB',
      'BBBBBBBDBBBB'
    ],
    startX: 5,
    startY: 5,
    background: 'plank'
  },
  {
    // STI-1 "4"
    layout: [
      'TTTTTTTTTTTTTTTTTTTTTTTT',
      'TGGGGGGGGGGGGGGGGGGGGGGT',
      'TGGGGGGGGGGGGGGGGGGGGGGT',
      'VGGGGGGGGGGGGGGGGGGGGGGV',
      'TGGGGGGGGGGGGGGGGGGGGGGT',
      'TGGGGGGGGGGGGGGGGGGGGGGT',
      'TTTTTTTTTTTTTTTTTTTTTTTT'
    ],
    startX: 5,
    startY: 5,
    background: 'grass'
  },
  {
    //YURBORG "5"
    layout: [
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'VGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG',
      'GGGGGGGGGGGGGGGGGGGGGGGG'
    ],
    startX: 4,
    startY: 4,
    background: 'grass'
  },
  {
    // CASINO SPENNINGSBYEN "6"
    layout: [
      'BBBBBBBBBBBBBBBBBBBBBBBB',
      'BBBBBBBBBBBBBBBBBBBBBBBB',
      'BPPPPPPPPPPPPPPPPPPPPPPB',
      'BPPPPPPPPPPPPPPPPPPPPPPB',
      'BPPPPPPPPPPPPPPPPPPPPPPB',
      'BPPPPPPPPPPPPPPPPPPPPPPB',
      'BPPPPVPPPPPPPPPPPPPPPPPB'
    ],
    startX: 5,
    startY: 5,
    background: 'plank'
  }
];

// ================== QUESTER ==================



// ========= LYD =========
const sounds = {
  music: {
    //0: new Audio("musikk/introVoidQuestMusic.wav"),
    //1: new Audio("audio/music_house.mp3"),
    //2: new Audio("audio/music_cave.mp3")
  },
  sfx: {
    startFishing: new Audio("lyder/kasteFiskeStang.wav"),
    gotBite: new Audio("lyder/fiskNapper.wav"),
    catchSuccess: new Audio("lyder/fangetFisk.wav"),
    catchFail: new Audio("lyder/mistetFisk.wav")
  }
};

let masterVolume = 0.5;

const savedVolume = localStorage.getItem('voidquest_volume');
if (savedVolume !== null) {
  masterVolume = parseFloat(savedVolume);
}

function toggleSettings() {
  const settings = document.getElementById('settingsMenu');
  settings.style.display = settings.style.display === 'none' ? 'block' : 'none';
}

function updateVolume(value) {
  masterVolume = parseFloat(value);

  // Juster volum på alle lyder og musikk
  Object.values(sounds.music).forEach(audio => {
    audio.volume = masterVolume;
  });

  Object.values(sounds.sfx).forEach(audio => {
    audio.volume = masterVolume;
  });

  // Lagre volumvalg i localStorage
  localStorage.setItem('voidquest_volume', masterVolume);
}

// ========= LYD FERDIG =========
let currentMusic = null;

let currentLevel = 0, map = [], mapWidth = 0, mapHeight = 0;
let currentBackground = 'grass';

let isFishing = false;
let fishingBox = null;
let fishTimeout = null;
let biteTimeout = null;
let currentFish = null;
let fishCaught = false;

let inventory = [];
let inventoryOpen = false;
let gold = 0;

function loadLevel(levelIndex, startX = null, startY = null) {
  const levelNames = {
    0: "Spenningsbyen",
    1: "Gatherers hub",
    2: "Deep-Void-Cave",
    3: "Trophyroom",
    4: "Path-1",
    5: "Yurborg"
  };
  
  const level = levels[levelIndex];
  currentLevel = levelIndex;

  const locationLabel = document.getElementById("locationLabel");
  locationLabel.innerText = levelNames[levelIndex] || `Område ${levelIndex}`;

  if (currentMusic) {
    currentMusic.pause();
    currentMusic.currentTime = 0;
  }

  currentMusic = sounds.music[levelIndex];
  if (currentMusic) {
    currentMusic.loop = true;
    currentMusic.volume = masterVolume;
    currentMusic.play();
  }

  map = level.layout.map(row => row.split('').map(char => tileMapping[char]));
  mapHeight = map.length;
  mapWidth = map[0].length;

  canvas.width = mapWidth * tileSize;
  canvas.height = mapHeight * tileSize;

  currentBackground = level.background || 'grass';

  character.x = startX !== null ? startX : level.startX;
  character.y = startY !== null ? startY : level.startY;

  character.pixelX = character.x * tileSize;
  character.pixelY = character.y * tileSize;

  gameLoop();
  // Fjern tidligere trofévisning hvis den finnes
  const existingTrophy = document.getElementById("trophyRoom");
  if (existingTrophy) existingTrophy.remove();

}

function drawMap() {
  for (let y = 0; y < mapHeight; y++) {
    for (let x = 0; x < mapWidth; x++) {
      const tileType = map[y][x];
      ctx.drawImage(tileImages[currentBackground], x * tileSize, y * tileSize, tileSize, tileSize);
      if (tileType !== 'grass') {
        ctx.drawImage(tileImages[tileType], x * tileSize, y * tileSize, tileSize, tileSize);
      }
    }
  }
    npcs.forEach(npc => {
      if (npc.level === currentLevel) {
        const img = new Image();
        img.src = npc.image;
        ctx.drawImage(img, npc.x * tileSize, npc.y * tileSize, tileSize, tileSize);
      }
  });
}

function changeTile(levelIndex, x, y, newTileChar) {
  // Endre layout-dataen
  const row = levels[levelIndex].layout[y];
  const newRow = row.substring(0, x) + newTileChar + row.substring(x + 1);
  levels[levelIndex].layout[y] = newRow;

  // Hvis vi er på riktig nivå nå, oppdater også "map"-arrayen som brukes i spillet
  if (currentLevel === levelIndex) {
    map[y][x] = tileMapping[newTileChar];
    gameLoop(); // Tegn på nytt
  }
}

// === KARAKTERVALG ===
// Vi lagrer karaktervalg her etter character creation
let playerData = {
  gender: null,
  name: null,
  
};

// === Karaktervalgskjerm ===
function showCharacterCreation() {
  const container = document.createElement("div");
  container.id = "charCreation";
  container.style.position = "absolute";
  container.style.top = "0";
  container.style.left = "0";
  container.style.width = "100%";
  container.style.height = "100%";
  container.style.background = "rgba(0,0,0,0.9)";
  container.style.zIndex = "50";
  container.style.display = "flex";
  container.style.flexDirection = "column";
  container.style.alignItems = "center";
  container.style.justifyContent = "center";
  container.style.color = "white";
  container.style.fontFamily = "monospace";

  container.innerHTML = `
    <h2>Lag din karakter</h2>
    <label>Kallenavn: <input id="charName" /></label><br>
    <label>Kjønn:
      <select id="charGender">
        <option value="male">Mann</option>
        <option value="female">Kvinne</option>
      </select>
    </label><br><br>
    <button onclick="finishCharacterCreation()">Start spill</button>
  `;

  document.body.appendChild(container);
}

function finishCharacterCreation() {
  const gender = document.getElementById("charGender").value;
  const name = document.getElementById("charName").value.trim();

  if (!name) {
    alert("Du må velge et navn!");
    return;
  }

  playerData.gender = gender;
  playerData.name = name;
  applyCharacterAppearance();

  document.getElementById("charCreation").remove();

  // Start spillet fra level 0
  loadLevel(0);

  // Lagre umiddelbart
  saveGame();
}

function applyCharacterAppearance() {
  if (!playerData || !playerData.gender) return;

  if (playerData.gender === 'male') {
    characterImages.up.src = 'images/pixelmannUp.png';
    characterImages.down.src = 'images/pixelmanndown.png';
    characterImages.left.src = 'images/pixelmannLeft.png';
    characterImages.right.src = 'images/pixelmannRight.png';
  } else {
    characterImages.up.src = 'images/pixelwomanUp.png';
    characterImages.down.src = 'images/pixelwomanDown.png';
    characterImages.left.src = 'images/pixelwomanLeft.png';
    characterImages.right.src = 'images/pixelwomanRight.png';
  }
}

// === Karakter tegning ===
function drawCharacter() {
  const img = characterImages[character.direction];
  ctx.drawImage(img, character.pixelX, character.pixelY, tileSize, tileSize);
}

function canMoveTo(x, y) {
  if (x < 0 || y < 0 || x >= mapWidth || y >= mapHeight) return false;
  return !nonWalkableTiles.includes(map[y][x]);
}

function moveCharacter(dx, dy) {
  if (character.moving) return;

  const newX = character.x + dx;
  const newY = character.y + dy;
  if (!canMoveTo(newX, newY)) return;

  character.direction = dx === -1 ? 'left' : dx === 1 ? 'right' : dy === -1 ? 'up' : 'down';
  character.moving = true;
  character.x = newX;
  character.y = newY;

  const targetX = character.x * tileSize;
  const targetY = character.y * tileSize;
  const speed = 2;

  function animate() {
    let doneX = false, doneY = false;
    if (character.pixelX < targetX) {
      character.pixelX += speed;
      if (character.pixelX >= targetX) { character.pixelX = targetX; doneX = true; }
    } else if (character.pixelX > targetX) {
      character.pixelX -= speed;
      if (character.pixelX <= targetX) { character.pixelX = targetX; doneX = true; }
    } else { doneX = true; }

    if (character.pixelY < targetY) {
      character.pixelY += speed;
      if (character.pixelY >= targetY) { character.pixelY = targetY; doneY = true; }
    } else if (character.pixelY > targetY) {
      character.pixelY -= speed;
      if (character.pixelY <= targetY) { character.pixelY = targetY; doneY = true; }
    } else { doneY = true; }

    gameLoop();

    if (!doneX || !doneY) {
      requestAnimationFrame(animate);
    } else {
      character.moving = false;
      const tile = map[character.y][character.x];
      if (tile === 'door' || tile === 'voidgate') {
        const key = `${character.x},${character.y}`;
        const door = doorMap[currentLevel]?.[key];
        if (door) loadLevel(door.targetLevel, door.targetX, door.targetY);
      }
    }
  }

  requestAnimationFrame(animate);
}

function getAllUniqueCreatures() {
  const fish = Object.values(fishPools).flat();
  const land = Object.values(treeCreaturePools).flat();
  const all = [...fish, ...land];

  const seen = {};
  return all.filter(c => {
    if (seen[c.name]) return false;
    seen[c.name] = true;
    return true;
  });
}
function tryInteract() {
  if (character.moving || isFishing) return;

  let tx = character.x, ty = character.y;
  if (character.direction === 'up') ty -= 1;
  if (character.direction === 'down') ty += 1;
  if (character.direction === 'left') tx -= 1;
  if (character.direction === 'right') tx += 1;

  const tile = map[ty]?.[tx];

  const npc = npcs.find(n => n.level === currentLevel && n.x === tx && n.y === ty);
  if (npc) return startNPCInteraction(npc);

  if (tile === 'water') return startFishing();
  if (tile === 'tree') return startTreeHunt(); 

  if (tile === 'npcShop') return openShop();
}

function startNPCInteraction(npc) {
  const dialogBox = document.createElement("div");
  dialogBox.id = "npcDialog";
  dialogBox.style.position = "absolute";
  dialogBox.style.bottom = "50px";
  dialogBox.style.left = "50%";
  dialogBox.style.transform = "translateX(-50%)";
  dialogBox.style.background = "#222";
  dialogBox.style.color = "white";
  dialogBox.style.border = "2px solid #888";
  dialogBox.style.padding = "20px";
  dialogBox.style.fontFamily = "monospace";
  dialogBox.style.zIndex = 20;
  dialogBox.style.width = "400px";

  let dialogIndex = 0;

  function renderDialog() {
    dialogBox.innerHTML = `
      <div style="display: flex; gap: 10px; align-items: center;">
        <img src="${npc.image}" width="48" height="48">
        <strong>${npc.name}</strong>
      </div>
      <p style="margin-top: 10px;">${npc.dialog[dialogIndex]}</p>
      <button id="nextDialogBtn">Next</button>
    `;

    dialogBox.querySelector("#nextDialogBtn").onclick = () => {
      dialogIndex++;
      if (dialogIndex >= npc.dialog.length) {
        document.body.removeChild(dialogBox);
        if (npc.type === "shop") {
          openShop();
        } else if (npc.type === "gatekeeper") {
          checkForCaveKey();
        }
      } else {
        renderDialog();
      }
    };
  }

  renderDialog();
  document.body.appendChild(dialogBox);
}

function startTreeHunt() {
  isFishing = true; // bruk samme flagg for nå
  fishCaught = false;

  showFishingBox("Leter i treet...");
  const wait = Math.floor(Math.random() * 8000) + 2000;
  fishTimeout = setTimeout(treeCreatureAppears, wait);
}

function treeCreatureAppears() {
  currentFish = getRandomTreeCreature();
  startCatchMinigame(currentFish, false); // false = er landdyr
}

function getRandomTreeCreature() {
  const pool = treeCreaturePools[currentLevel] || [];

  const totalChance = pool.reduce((sum, c) => sum + c.chance, 0);
  const roll = Math.random() * totalChance;
  let sum = 0;

  for (const creature of pool) {
    sum += creature.chance;
    if (roll < sum) return creature;
  }

  return { name: "???", rarity: "common", image: "images/defaultTree.png", price: 0 };
}

function startFishing() {
  isFishing = true;

  if (sounds.sfx.startFishing) sounds.sfx.startFishing.play();

  fishCaught = false;
  showFishingBox("Fisker...");
  const wait = Math.floor(Math.random() * 8000) + 2000;
  fishTimeout = setTimeout(fishGotBite, wait);
}

function showFishingBox(text) {
  if (!fishingBox) {
    fishingBox = document.createElement('div');
    fishingBox.id = 'fishingBox';
    fishingBox.style.position = 'absolute';
    fishingBox.style.bottom = '50px';
    fishingBox.style.left = '50%';
    fishingBox.style.transform = 'translateX(-50%)';
    fishingBox.style.background = '#333';
    fishingBox.style.color = '#fff';
    fishingBox.style.padding = '10px';
    fishingBox.style.border = '2px solid #aaa';
    fishingBox.style.fontFamily = 'monospace';
    fishingBox.style.zIndex = '10';
    document.body.appendChild(fishingBox);
  }
  fishingBox.innerHTML = `${text}<br><button onclick="cancelFishing()">Avbryt</button>`;
}

function hideFishingBox() {
  if (fishingBox) {
    document.body.removeChild(fishingBox);
    fishingBox = null;
  }
}

function cancelFishing() {
  clearTimeout(fishTimeout);
  clearTimeout(biteTimeout);
  hideFishingBox();
  isFishing = false;
}

function fishGotBite() {
  currentFish = getRandomFish();
  if (sounds.sfx.gotBite) sounds.sfx.gotBite.play();

  startCatchMinigame(currentFish, true); // true = er vann/fiske
}

function startCatchMinigame(creature, isWater) {
  const settings = raritySettings[creature.rarity] || { time: 4000, color: "white" };
  const totalTime = settings.time;
  const color = settings.color;

  fishCaught = false;
  let successZoneStart = 0.45;
  let successZoneEnd = 0.55;

  fishingBox.innerHTML = `
    <div style="margin-bottom: 10px;">
      <div style="border: 2px solid ${color}; padding: 4px; display:inline-block;">
        <img src="${creature.image}" width="64" height="64" alt="${creature.name}">
      </div>
      <div>${creature.name}</div>
    </div>
    <div style="margin-bottom: 10px;">Trykk [Space] når linja er på streken!</div>
    <div id="biteTimerBar" style="width: 100%; height: 20px; background: #222; margin-top: 10px; position: relative;">
      <div id="catchZone" style="position: absolute; top: 0; left: 45%; width: 10%; height: 100%; background: #fff2; border-left: 2px solid ${color}; border-right: 2px solid ${color}; z-index: 1;"></div>
      <div id="biteTimerFill" style="position: absolute; top: 0; left: 0; height: 100%; width: 0%; background: ${color}; z-index: 2;"></div>
    </div>
  `;

  const fill = document.getElementById("biteTimerFill");
  let elapsed = 0;
  const interval = 20;

  function onKeyDown(event) {
    if (event.code === "Space" && !fishCaught) {
      const progress = elapsed / totalTime;
      if (progress >= successZoneStart && progress <= successZoneEnd) {
        fishCaught = true;
        showFishingBox(`Du fanget en ${creature.name}!`);
        addToInventory(creature);
        if (sounds.sfx.catchSuccess) sounds.sfx.catchSuccess.play();
      } else {
        fishCaught = true;
        showFishingBox("Du bommet! Skapningen stakk av.");
        if (sounds.sfx.catchFail) sounds.sfx.catchFail.play();
      }
      document.removeEventListener("keydown", onKeyDown);
      clearInterval(countdown);
      setTimeout(cancelFishing, 1500);
    }
  }

  document.addEventListener("keydown", onKeyDown);

  const countdown = setInterval(() => {
    if (fishCaught) {
      clearInterval(countdown);
      document.removeEventListener("keydown", onKeyDown);
      return;
    }

    elapsed += interval;
    const progress = elapsed / totalTime;
    fill.style.width = (progress * 100) + "%";

    if (elapsed >= totalTime) {
      clearInterval(countdown);
      document.removeEventListener("keydown", onKeyDown);
      showFishingBox("Du reagerte ikke i tide!");
      if (sounds.sfx.catchFail) sounds.sfx.catchFail.play();
      setTimeout(cancelFishing, 1200);
    }
  }, interval);
}


function tryCatchFish(choice) {
  if (currentFish && currentFish.rarity === choice) {
    showFishingBox(`Du fanget en ${currentFish.name}!`);
    if (sounds.sfx.catchSuccess) sounds.sfx.catchSuccess.play();
    addToInventory(currentFish);
  } else {
    showFishingBox("Bom! Du mistet fisken.");
    if (sounds.sfx.catchFail) sounds.sfx.catchFail.play();
  }
  fishCaught = true;
  setTimeout(cancelFishing, 2000);
}

function getRandomFish() {
  const pool = fishPools[currentLevel] || [];

  const totalChance = pool.reduce((sum, fish) => sum + fish.chance, 0);
  const roll = Math.random() * totalChance;
  let sum = 0;

  for (const fish of pool) {
    sum += fish.chance;
    if (roll < sum) {
      return {
        name: fish.name,
        rarity: fish.rarity,
        image: fish.image,
        price: fish.price
      };
    }
  }

  return { name: "???", rarity: "common", image: "images/defaultFish.png", price: 0 };
}

function addToInventory(fish) {
  let item = inventory.find(i => i.name === fish.name);
  if (item) {
    item.count += 1;
  } else {
    inventory.push({ ...fish, count: 1 });
  }

  // Legg til i trophies hvis det er første gang du fanger denne
  if (!trophies.includes(fish.name)) {
    trophies.push(fish.name);
  }

  if (inventoryOpen) renderInventory();
}

function openShop() {
  const shopBox = document.getElementById('shopBox');
  let shopHTML = `<h3 style="font-family: Cursive;">Morgan</h3><p>This is my prices:</p>`;
  let hasFish = false;

  inventory.forEach(item => {
    const allFish = Object.values(fishPools).flat();
    const fishInfo = allFish.find(f => f.name === item.name);

    if (fishInfo) {
      hasFish = true;
      shopHTML += `<button onclick="sellFish('${item.name}', ${fishInfo.price})">Sell ${item.name} (${fishInfo.price} gold)</button><br>`;
    }
  });

  if (!hasFish) {
    shopHTML += `<p>You dont have any creatures, off you go!.</p>`;
  }

  shopHTML += `<br><button onclick="closeShop()">Cancel</button>`;
  shopBox.innerHTML = shopHTML;
  shopBox.style.display = 'block';
}

function closeShop() {
  document.getElementById('shopBox').style.display = 'none';
}

function sellFish(fishName, price) {
  const itemIndex = inventory.findIndex(i => i.name === fishName);
  if (itemIndex !== -1) {
    inventory[itemIndex].count--;
    gold += price;
    if (inventory[itemIndex].count <= 0) {
      inventory.splice(itemIndex, 1);
    }
    renderInventory();
    openShop(); // Refresh shop UI
  }
}

let showMap = false;
const mouse = { x: 0, y: 0 };
let hoveredLocation = null;

canvas.addEventListener("mousemove", (e) => {
  if (!showMap) return;
  const rect = canvas.getBoundingClientRect();
  mouse.x = e.clientX - rect.left;
  mouse.y = e.clientY - rect.top;

  gameLoop(); 
});

function renderWorldMap() {
  const mapX = canvas.width - 200 - 20;
  const mapY = 10;
  const mapWidth = 200;
  const mapHeight = 200;

  ctx.fillStyle = "#111";
  ctx.fillRect(mapX, mapY, mapWidth, mapHeight);
  ctx.strokeStyle = "#888";
  ctx.strokeRect(mapX, mapY, mapWidth, mapHeight);

  hoveredLocation = null;

  mapData.forEach(loc => {
    const lx = mapX + loc.x;
    const ly = mapY + loc.y;
    const size = loc.type === "city" ? 10 : 6;
    const shape = loc.type === "city" ? "rect" : "circle";

    const isHovered = (
      mouse.x >= lx - size && mouse.x <= lx + size &&
      mouse.y >= ly - size && mouse.y <= ly + size
    );

    if (isHovered) hoveredLocation = loc.name;

    ctx.fillStyle = loc.color;
    if (shape === "rect") {
      ctx.fillRect(lx - size / 2, ly - size / 2, size, size);
    } else {
      ctx.beginPath();
      ctx.arc(lx, ly, size / 2, 0, Math.PI * 2);
      ctx.fill();
    }
  });

  if (hoveredLocation) {
    ctx.fillStyle = "#fff";
    ctx.font = "12px monospace";
    ctx.fillText(hoveredLocation, mapX + 5, mapY + mapHeight - 5);
  }
}

document.addEventListener("keydown", (e) => {
  if (e.key === "m") {
    showMap = !showMap;
    gameLoop();
  }
});

// === Overstyr gameLoop med kart ===
function gameLoop() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawMap();
  drawCharacter();
  if (showMap) renderWorldMap();
}


function renderInventory() {
  const inv = document.getElementById('inventory');
  inv.innerHTML = `<h3 style="color:white;font-family: Cursive;">Inventory (${playerData.name})</h3><p style="color:gold;font-family: Cursive;">Gold: ${gold}</p>`;  
  
  const grid = document.createElement('div');
  grid.style.display = 'grid';
  grid.style.gridTemplateColumns = 'repeat(5, 64px)';
  grid.style.gap = '8px';

  inventory.forEach(item => {
    const cell = document.createElement('div'); 
    const rarity = raritySettings[item.rarity];
    const borderColor = rarity ? rarity.border : "#666";

    cell.style.width = '64px';
    cell.style.height = '64px';
    cell.style.background = '#111';
    cell.style.border = `2px solid ${borderColor}`;
    cell.style.display = 'flex';
    cell.style.flexDirection = 'column';
    cell.style.alignItems = 'center';
    cell.style.justifyContent = 'center';
    cell.innerHTML = `<img src="${item.image}" width="32" height="32"><div style="color:white;">x${item.count}</div>`;
    grid.appendChild(cell);
  });

  inv.appendChild(grid);
}

function toggleInventory() {
  inventoryOpen = !inventoryOpen;
  document.getElementById('inventory').style.display = inventoryOpen ? 'block' : 'none';
  if (inventoryOpen) renderInventory();
}

document.addEventListener('keydown', (e) => {
  if (character.moving) return;
  switch (e.key) {
    case 'w': moveCharacter(0, -1); break;
    case 's': moveCharacter(0, 1); break;
    case 'a': moveCharacter(-1, 0); break;
    case 'd': moveCharacter(1, 0); break;
    case 'e': tryInteract(); break;
    case 'i': toggleInventory(); break;
  }
});

document.addEventListener('keydown', (e) => {
  if (e.key === 'Tab') {
    e.preventDefault();
    toggleMenu();
  }
});

function toggleMenu() {
  menuOpen = !menuOpen;
  document.getElementById('gameMenu').style.display = menuOpen ? 'flex' : 'none';
}

function closeMenu() {
  menuOpen = false;
  document.getElementById('gameMenu').style.display = 'none';
}

function saveGame() {
  const saveData = {
    character: playerData,
    inventory,
    trophies,
    gold,
    level: currentLevel,
    position: {
      x: character.x,
      y: character.y,
      direction: character.direction
    },
    playerLevel,
    playerXP,
    xpToNextLevel
  };

  localStorage.setItem('voidquest_save', JSON.stringify(saveData));
  alert("Spillet er lagret!");
}

function loadGame() {
  try {
    const saved = localStorage.getItem('voidquest_save');
    if (saved) {
      const data = JSON.parse(saved);
      inventory = data.inventory || [];
      trophies = data.trophies || [];
      gold = data.gold || 0;

      // Last nivå og XP
      playerLevel = data.playerLevel || 1;
      playerXP = data.playerXP || 0;

      xpToNextLevel = Math.floor(100 * Math.pow(1.25, playerLevel - 1)); // beregn riktig threshold

      const level = data.level ?? 0;
      const x = data.position?.x ?? levels[level].startX;
      const y = data.position?.y ?? levels[level].startY;
      const dir = data.position?.direction ?? 'down';

      character.direction = dir;
      loadLevel(level, x, y);
      renderInventory();
      updateXPUI(); // oppdater UI etter load
      updateXPBar();
    } else {
      loadLevel(0);
    }
  } catch (e) {
    console.error("Feil ved lasting av lagring:", e);
    loadLevel(0);
  }
}

// === Troféjournal ===
let trophyJournalOpen = false;
let currentTrophyType = "water";

function toggleTrophyJournal() {
  trophyJournalOpen = !trophyJournalOpen;
  const existing = document.getElementById("trophyJournal");
  if (existing) {
    existing.remove();
    return;
  }
  renderTrophyJournal();
}

function getUniqueCreaturesFromList(list) {
  const seen = new Set();
  return list.filter(creature => {
    if (seen.has(creature.name)) return false;
    seen.add(creature.name);
    return true;
  });
}

function renderTrophyJournal() {
  const rawFish = Object.values(fishPools).flat();
  const rawLand = Object.values(treeCreaturePools).flat();
  const allFish = getUniqueCreaturesFromList(rawFish);
  const allLand = getUniqueCreaturesFromList(rawLand);

  //Sorterer journal skapninger etter rarity
  //Og fultrerer ut secret rarity
  const fullList = currentTrophyType === "water" ? allFish : allLand;

  const list = fullList
    .filter(creature => creature.rarity !== "secret" || trophies.includes(creature.name))
    .slice()
    .sort((a, b) => {
      const order = { common: 1, rare: 2, legendary: 3, secret: 4 };
      return (order[a.rarity] || 99) - (order[b.rarity] || 99);
    });

  // === INFOBOKS hover ===
  let hoverInfoBox = document.getElementById("hoverInfoBox");
  if (!hoverInfoBox) {
    hoverInfoBox = document.createElement("div");
    hoverInfoBox.id = "hoverInfoBox";
    hoverInfoBox.style.position = "fixed";
    hoverInfoBox.style.pointerEvents = "none";
    hoverInfoBox.style.background = "#222";
    hoverInfoBox.style.border = "1px solid #999";
    hoverInfoBox.style.color = "white";
    hoverInfoBox.style.padding = "8px";
    hoverInfoBox.style.fontFamily = "monospace";
    hoverInfoBox.style.zIndex = "1000";
    hoverInfoBox.style.display = "none";
    document.body.appendChild(hoverInfoBox);
  }

  const journal = document.createElement("div");
  journal.id = "trophyJournal";
  journal.style.position = "absolute";
  journal.style.top = "50px";
  journal.style.left = "50%";
  journal.style.transform = "translateX(-50%)";
  journal.style.background = "#111";
  journal.style.border = "2px solid #888";
  journal.style.padding = "20px";
  journal.style.zIndex = "30";
  journal.style.color = "white";
  journal.style.fontFamily = "monospace";
  journal.style.textAlign = "center";

  const caught = list.filter(c => trophies.includes(c.name)).length;

  const buttons = `
    <button onclick="currentTrophyType='water'; toggleTrophyJournal(); toggleTrophyJournal()">Water</button>
    <button onclick="currentTrophyType='land'; toggleTrophyJournal(); toggleTrophyJournal()">Land</button>
  `;

  const title = `<h3>${currentTrophyType === 'water' ? 'Fisker' : 'Land skapninger'} (${caught}/${list.length})</h3>`;

  const grid = document.createElement("div");
  grid.style.display = "grid";
  grid.style.gridTemplateColumns = "repeat(6, 64px)";
  grid.style.gap = "12px";
  grid.style.marginTop = "12px";

  list.forEach(creature => {
    const hasCaught = trophies.includes(creature.name);

    const cell = document.createElement("div");
    cell.style.width = "64px";
    cell.style.height = "64px";
    cell.style.background = "#222";
    const rarity = raritySettings[creature.rarity];
    const borderColor = hasCaught && rarity ? rarity.border : "#444";
    cell.style.border = `2px solid ${borderColor}`;
    cell.style.display = "flex";
    cell.style.alignItems = "center";
    cell.style.justifyContent = "center";

    const img = document.createElement("img");

    cell.onmousemove = (e) => {
      const rarityData = raritySettings[creature.rarity];
      const rarityColor = rarityData ? rarityData.color : "#fff";
    
      let html = `<strong style="color:${rarityColor}">${hasCaught ? creature.name : "???"}</strong><br>`;
      html += `<span>Rarity: <span style="color:${rarityColor}">${creature.rarity}</span></span><br>`;
      html += hasCaught ? `Price: ${creature.price} gold` : "";
    
      hoverInfoBox.innerHTML = html;
      hoverInfoBox.style.display = "block";
      hoverInfoBox.style.left = (e.clientX + 15) + "px";
      hoverInfoBox.style.top = (e.clientY + 15) + "px";
    };
    
    cell.onmouseleave = () => {
      hoverInfoBox.style.display = "none";
    };

    img.src = creature.image;
    img.width = 48;
    img.height = 48;
    img.title = hasCaught ? creature.name : "???";
    if (!hasCaught) img.style.filter = "grayscale(100%) brightness(50%)";

    cell.appendChild(img);
    grid.appendChild(cell);
  });

  journal.innerHTML = buttons + title;
  journal.appendChild(grid);

  const close = document.createElement("button");
  close.textContent = "Lukk";
  close.style.marginTop = "10px";
  close.onclick = () => journal.remove();
  journal.appendChild(close);

  document.body.appendChild(journal);
}

// === Tast for å åpne journal ===
document.addEventListener("keydown", (e) => {
  if (e.key === "j") {
    toggleTrophyJournal();
  }
});


// === XP & LEVEL SYSTEM ===
let playerLevel = 1;
let playerXP = 0;
let xpToNextLevel = 100;

// Hvor mye XP hver type fisk gir
defineFishXP();
function defineFishXP() {
  const pool = Object.values(fishPools).flat();
  pool.forEach(fish => {
    if (!fish.xp) {
      if (fish.rarity === "common") fish.xp = 10;
      else if (fish.rarity === "rare") fish.xp = 25;
      else if (fish.rarity === "legendary") fish.xp = 75;
    }
  });
}

function gainXP(amount) {
  playerXP += amount;
  if (playerXP >= xpToNextLevel) {
    playerXP -= xpToNextLevel;
    playerLevel++;
    xpToNextLevel = Math.floor(xpToNextLevel * 1.25);
    alert(`You just levelled up to level ${playerLevel}!`);
    if (sounds.sfx.levelUp) sounds.sfx.levelUp.play();
  }
  updateXPBar();
}

function updateXPBar() {
  const bar = document.getElementById("xpBar");
  const percent = Math.floor((playerXP / xpToNextLevel) * 100);
  if (bar) {
    bar.style.width = percent + "%";
    bar.innerHTML = `<span style="white-space: nowrap;">XP: ${playerXP} / ${xpToNextLevel}</span>`;
  }
}

// === Legg til HTML XP-Bar et sted i DOM ===
function createXPUI() {
  const xpBarWrapper = document.createElement("div");
  xpBarWrapper.style.position = "absolute";
  xpBarWrapper.style.bottom = "50px";
  xpBarWrapper.style.left = "50%";
  xpBarWrapper.style.transform = "translateX(-50%)";
  xpBarWrapper.style.width = "300px";
  xpBarWrapper.style.background = "#222";
  xpBarWrapper.style.border = "2px solid #888";
  xpBarWrapper.style.color = "white";
  xpBarWrapper.style.fontFamily = "monospace";
  

  const xpBar = document.createElement("div");
  xpBar.id = "xpBar";
  xpBar.style.height = "20px";
  xpBar.style.width = "0%";
  xpBar.style.background = "lime";
  xpBar.style.textAlign = "center";
  xpBar.style.fontSize = "14px";
  xpBar.style.lineHeight = "20px";

  xpBarWrapper.appendChild(xpBar);
  document.body.appendChild(xpBarWrapper);
  updateXPBar();
}

// === Spill av lyd for level up ===
sounds.sfx.levelUp = new Audio("lyder/levelUp.wav");

// === Legg til XP når du fanger fisk ===
function addToInventory(fish) {
  let item = inventory.find(i => i.name === fish.name);
  if (item) {
    item.count += 1;
  } else {
    inventory.push({ ...fish, count: 1 });
  }
  if (!trophies.includes(fish.name)) {
    trophies.push(fish.name);
  }
  gainXP(fish.xp || 10); // Få XP basert på fisken
  if (inventoryOpen) renderInventory();
}

// === Start XP UI ved spillets start ===
createXPUI();



function showCharacterCreationWithSlot(slotKey) {
  showCharacterCreation();
  
  // Vent til neste "tick" så DOM-innholdet er på plass
  setTimeout(() => {
    const button = document.querySelector("#charCreation button");
    if (button) {
      button.onclick = () => finishCharacterCreationToSlot(slotKey);
    } else {
      console.error("Fant ikke startknappen for karakteropprettelse!");
    }
  }, 0);
}

function finishCharacterCreationToSlot(slotKey) {
  const gender = document.getElementById("charGender").value;
  const name = document.getElementById("charName").value.trim();

  if (!name) {
    alert("Du må velge et navn!");
    return;
  }

  playerData.gender = gender;
  playerData.name = name;
  applyCharacterAppearance();

  localStorage.setItem(slotKey + '_character', JSON.stringify(playerData));
  document.getElementById("charCreation").remove();

  loadLevel(0);
}


// Prevent movement/inventory while menu is open or fishing
document.addEventListener('keydown', (e) => {
  if (menuOpen || isFishing) return;
  // Your existing movement + inventory toggle logic here
});

function showCharacterInfo() {
  // Fjern tidligere visning hvis den finnes
  const existing = document.getElementById("characterInfoBox");
  if (existing) existing.remove();

  const box = document.createElement("div");
  box.id = "characterInfoBox";
  box.style.position = "absolute";
  box.style.top = "50%";
  box.style.left = "10%";
  box.style.transform = "translate(-50%, -50%)";
  box.style.background = "#222";
  box.style.border = "2px solid #aaa";
  box.style.padding = "20px";
  box.style.color = "white";
  box.style.fontFamily = "monospace";
  box.style.zIndex = "30";
  box.style.textAlign = "center";

  const total = getAllUniqueCreatures().length;
  const caught = trophies.length;

  const genderImage = playerData.gender === "male" ? "images/pixelmanndown.png" : "images/pixelwomanDown.png";

  box.innerHTML = `
    <h2>${playerData.name}</h2>
    <img src="${genderImage}" width="64" height="64"><br><br>
    <strong>Level:</strong> ${playerLevel}<br>
    <strong>XP:</strong> ${playerXP} / ${xpToNextLevel}<br>
    <strong>Trophies:</strong> ${caught} av ${total}<br><br>
    <button onclick="document.getElementById('characterInfoBox').remove()">Lukk</button>
  `;

  document.body.appendChild(box);
}

const saved = localStorage.getItem("voidquest_save");

if (saved) {
  const data = JSON.parse(saved);

  playerData = data.character;
  applyCharacterAppearance();

  inventory = data.inventory || [];
  trophies = data.trophies || [];
  gold = data.gold || 0;
  playerLevel = data.playerLevel || 1;
  playerXP = data.playerXP || 0;
  xpToNextLevel = data.xpToNextLevel || 100;

  const level = data.level ?? 0;
  const pos = data.position || { x: 0, y: 0, direction: 'down' };

  character.direction = pos.direction;
  loadLevel(level, pos.x, pos.y);
  renderInventory();
  //updateXPUI();
  updateXPBar();
} else {
  showCharacterCreation();
}

