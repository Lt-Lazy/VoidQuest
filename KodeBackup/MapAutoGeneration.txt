<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Top-Down Game</title>
  <style>
    
    body {
        margin: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background: #e0e0e0;
    }

    #gameCanvas {
        background: #a8d0a8;
        border: 4px solid #444;
        image-rendering: pixelated;
    }


  </style>
</head>
<body>
  <canvas id="gameCanvas" width="512" height="512"></canvas>
  <script>

    const characterImages = {
    up: new Image(),
    down: new Image(),
    left: new Image(),
    right: new Image(),
    };

    const tileImages = {
        grass: new Image(),
        tree: new Image(),
        wall: new Image()
    };

    tileImages.grass.src = 'images/grassTile.png';
    tileImages.tree.src = 'images/treeTile.png';
    tileImages.wall.src = 'images/brickTile.png';

    characterImages.up.src = 'images/pixelmannUp.png';
    characterImages.down.src = 'images/pixelmannDown.png';
    characterImages.left.src = 'images/pixelmannLeft.png';
    characterImages.right.src = 'images/pixelmannRight.png';

    const characterImage = new Image();
    characterImage.src = 'images/pixelpingvin.png'; // sørg for at filen finnes i samme mappe

    characterImage.onload = () => {
        gameLoop(); // tegn første gang når bildet er klart
    };

    const nonWalkableTiles = ['tree', 'wall'];
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    const tileSize = 32;
    const mapWidth = 16;
    const mapHeight = 16;

    const character = {
      x: 2,
      y: 2,
      direction: 'down' // startretning
      
    };

    const keys = {
      w: false,
      a: false,
      s: false,
      d: false
    };

    const map = [];
    for (let y = 0; y < mapHeight; y++) {
        const row = [];
        for (let x = 0; x < mapWidth; x++) {
            if (x === 0 || y === 0 || x === mapWidth - 1 || y === mapHeight - 1) {
            row.push('wall'); // kantene er vegger
        } else {
            row.push(Math.random() < 0.1 ? 'tree' : 'grass'); // noen trær inni
        }
        }
        map.push(row);
    }

    function drawMap() {
        for (let y = 0; y < mapHeight; y++) {
            for (let x = 0; x < mapWidth; x++) {
            const tileType = map[y][x];

                // Tegn alltid grass først som bakgrunn
                ctx.drawImage(tileImages.grass, x * tileSize, y * tileSize, tileSize, tileSize);

                // Hvis det er et annet tile enn grass, tegn det oppå
                if (tileType !== 'grass') {
                    const img = tileImages[tileType];
                    if (img.complete) {
                        ctx.drawImage(img, x * tileSize, y * tileSize, tileSize, tileSize);
                    }
                }
            }
        }
    }


    function canMoveTo(x, y) {
        if (x < 0 || y < 0 || x >= mapWidth || y >= mapHeight) return false;
        const tile = map[y][x];
        return !nonWalkableTiles.includes(tile);
    }

    function drawCharacter() {
        const img = characterImages[character.direction];
        ctx.drawImage(img, character.x * tileSize, character.y * tileSize, tileSize, tileSize);
    }

    function update() {
        if (keys.w && canMoveTo(character.x, character.y - 1)) {
            character.y--;
            character.direction = 'up';
        }
        if (keys.s && canMoveTo(character.x, character.y + 1)) {
            character.y++;
            character.direction = 'down';
        }
        if (keys.a && canMoveTo(character.x - 1, character.y)) {
            character.x--;
            character.direction = 'left';
        }
        if (keys.d && canMoveTo(character.x + 1, character.y)) {
            character.x++;
            character.direction = 'right';
        }
    }

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawMap();
      drawCharacter();
    }

    document.addEventListener('keydown', (e) => {
      if (e.key in keys) {
        keys[e.key] = true;
        update();
        gameLoop();
      }
    });

    document.addEventListener('keyup', (e) => {
      if (e.key in keys) {
        keys[e.key] = false;
      }
    });

    gameLoop();
  </script>


</body>
</html>
